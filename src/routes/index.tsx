import { useState, useMemo, useEffect, useRef } from "react";
import { App } from "../App";
import { useChat } from "../hooks/use-chat";
import { ChatMessage } from "../components/ChatMessage";
import { appConfig } from "../../config.browser";
import { Welcome } from "../components/Welcome";
import { ChatWindow } from "../ChatWindow";
import { getCookie } from "../utils/cookies";
import { ConditionContext } from "../utils/CondContext";


export default function Index() {

  const [condition, setCondition] = useState<string | null>(null);

  // Read the cookie after the page loads
  useEffect(() => {
    const cond = getCookie("study_cond");
    setCondition(cond ?? "CONTROL"); // fallback if no cookie found
  }, []);
  // The content of the box where the user is typing
  const [message, setMessage] = useState<string>("");

  // This hook is responsible for managing the chat and communicating with the
  // backend
  const { currentChat, chatHistory, sendMessage, cancel, state, clear } =
    useChat();

  // This is the message that is currently being generated by the AI
  const currentMessage = useMemo(() => {
    return { content: currentChat ?? "", role: "assistant" } as const;
  }, [currentChat]);

  // This is a ref to the bottom of the chat history. We use it to scroll
  // to the bottom when a new message is added.
  const bottomRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [currentChat, chatHistory, state]);

  const scrollToBottom = () => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // This is a ref to the input box. We use it to focus the input box when the
  // user clicks on the "Send" button.
  const inputRef = useRef<HTMLInputElement>(null);
  const focusInput = () => {
    inputRef.current?.focus();
  };

  useEffect(() => {
    focusInput();
  }, [state]);

   return (
    <ConditionContext.Provider value={condition ?? "CONTROL"}>
      <App title={`Experiment condition: ${condition}`} condition={condition}>
        <ChatWindow
          chatHistory={chatHistory}
          currentMessage={currentMessage}
          state={state}
          sendMessage={sendMessage}
          cancel={cancel}
          clear={clear}
          message={message}
          setMessage={setMessage}
          condition={condition}
        />
      </App>
    </ConditionContext.Provider>
  );
}

